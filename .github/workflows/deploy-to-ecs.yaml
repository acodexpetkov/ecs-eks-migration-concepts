name: Deploy to ECS

on:

  workflow_run:
    workflows: [ "Build Image" ]
    types: [ completed ]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && vars.DEPLOY_ECS == 'true' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      CLUSTER:    ${{ secrets.ECS_CLUSTER }}
      SERVICE:    ${{ secrets.ECS_SERVICE }}
      TASK_FAMILY: ${{ secrets.ECS_TASK }}

    steps:
    # 1. Pull the tag generated by Build Image
    - name: Download tag artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build-image.yml
        run_id:  ${{ github.event.workflow_run.id }}
        name:    image-meta

    - name: Read tag
      id: tag
      run: echo "TAG=$(cat image_tag.txt)" >> "$GITHUB_ENV"

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region:            ${{ env.AWS_REGION }}
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # 3. Register a new task-definition revision with the fresh image
    - name: Register new task definition revision
      id: register
      run: |
        TD_JSON=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
        NEW_DEF=$(echo "$TD_JSON" | \
          jq --arg IMG "${{ secrets.ECR_REGISTRY }}/hello-world:${TAG}" \
             '.taskDefinition | 
              del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
              (.containerDefinitions[0].image) = $IMG')
        REV_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "REV_ARN=$REV_ARN" >> "$GITHUB_ENV"
        echo "Registered: $REV_ARN"

    # 4. Update the service so ECS rolls out the new revision
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster  $CLUSTER \
          --service  $SERVICE \
          --task-definition "$REV_ARN" \
          --force-new-deployment
